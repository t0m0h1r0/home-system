- hosts: servers
  become: yes
  vars:
    apt_proxy: "{{groups['registry'][0]}}"
    apt_apps:
      - docker.io
      - docker-compose
      - python3-docker
      - nfs-common
      - tmux
      - htop
      - ssh-import-id
  tasks:
    - import_tasks: 02_install_apps.yml
    - import_tasks: 06_config_docker.yml

- hosts: servers
  vars:
    github_id: t0m0h1r0
  tasks:
    - name: import ssh-key
      shell: >
        ssh-import-id gh:{{github_id}}

- hosts: registry
  become: yes
  vars:
    pvs:
      - { "name": "docker_dir", "dir": "/var/lib/docker" }
    github_id: t0m0h1r0
  tasks:
    - import_tasks: 08_config_registry.yml
        
- hosts: managements
  become: yes
  tasks:
  - apt:
      name: ansible
  - ansible.builtin.git:
      repo: https://github.com/t0m0h1r0/home-system.git
      dest: ~/home-system/
      update: no
  - ansible.builtin.blockinfile:
      path: ~/.ansible.cfg
      block: |
        [defaults]
        host_key_checking = False

- hosts: proxies
  become: yes
  tasks:
  - name: Setup VPN Gate
    community.docker.docker_container:
      name: vpn_gate
      image: tantantanuki/ja-vpngate-proxy
      capabilities:
        - NET_ADMIN
      dns_servers:
        - 8.8.8.8
        - 1.1.1.1
        - 9.9.9.9
      ports:
        - 8118:8118
      devices:
        - /dev/net/tun
      restart_policy: always
  - name: Setup Squid
    apt:
      name: squid
  - ansible.builtin.lineinfile:
      path: /etc/squid/squid.conf
      regexp: 'cache_peer 127.0.0.1 parent 8118 7 no-query'
      line: 'cache_peer 127.0.0.1 parent 8118 7 no-query'
  - ansible.builtin.lineinfile:
      path: /etc/squid/squid.conf
      regexp: 'never_direct allow all'
      line: 'never_direct allow all'
  - ansible.builtin.lineinfile:
      path: /etc/squid/squid.conf
      regexp: 'http_access deny all'
      line: 'http_access allow all'
  - ansible.builtin.lineinfile:
      path: /etc/squid/squid.conf
      regexp: 'cache_dir ufs /var/spool/squid 100 16 256'
      line: 'cache_dir ufs /var/spool/squid 100 16 256'
  - service:
      name: squid
      state: restarted

- hosts: vpns
  become: yes
  tasks:
  - name: Set WireGuard
    file:
      path: /etc/wireguard
      state: directory
  - community.docker.docker_container:
      name: wireguard
      image: linuxserver/wireguard:latest
      capabilities:
        - NET_ADMIN
        - SYS_MODULE
      ports:
        - 51820:51820/udp
      volumes:
        - /etc/wireguard:/config
        - /lib/modules:/lib/modules
          #devices:
          #- /dev/net/tun
      env:
        PUID: "1000"
        PGID: "1000"
        SERVERPORT: "51820"
        SERVERURL: tomokawa.myddns.me
        PEERS: "16"
        PEERDNS: "auto"
        INTERNAL_SUBNET: "10.13.13.0"
        ALLOWEDIPS: "0.0.0.0/0"
        LOG_CONFS: "true"
      sysctls:
        net.ipv4.conf.all.src_valid_mark: "1"
      restart_policy: always

- hosts: ldaps
  become: yes
  tasks:
  - name: Set OpenlDAP
    community.docker.docker_volume:
      name: certificates
      driver: local
      driver_options:
        type: nfs
        o: "addr=qnap2,rw,nfsvers=4"
        device: ":/config/ldap/cert"
  - community.docker.docker_volume:
      name: database
      driver: local
      driver_options:
        type: nfs
        o: "addr=qnap2,rw,nfsvers=4"
        device: ":/config/ldap/database"
  - community.docker.docker_volume:
      name: config
      driver: local
      driver_options:
        type: nfs
        o: "addr=qnap2,rw,nfsvers=4"
        device: ":/config/ldap/config"
  - community.docker.docker_container:
      name: openldap
      image: osixia/openldap:latest
      ports:
        - 389:389
        - 636:636
      volumes:
        - certificates:/container/service/slapd/assets/certs
        - database:/var/lib/ldap
        - config:/etc/ldap/slapd.d
      env:
        LDAP_ORGANISATION: "home"
        LDAP_DOMAIN: "home.local"
        LDAP_ADMIN_USERNAME: "admin"
        LDAP_ADMIN_PASSWORD: "admin_pass"
        LDAP_CONFIG_PASSWORD: "config_pass"
        LDAP_BASE_DN: "dc=home,dc=local"
        LDAP_TLS_CRT_FILENAME: "server.crt"
        LDAP_TLS_KEY_FILENAME: "server.key"
        LDAP_TLS_CA_CRT_FILENAME: "home.local.ca.crt"
        LDAP_READONLY_USER: "true"
        LDAP_READONLY_USER_USERNAME: "user-ro"
        LDAP_READONLY_USER_PASSWORD: "ro_pass"
      restart_policy: always
  - community.docker.docker_container:
      name: phpldapadmin
      image: osixia/phpldapadmin:latest
      ports:
        - 7443:443
      env:
        PHPLDAPADMIN_LDAP_HOSTS: "openldap"
        PHPLDAPADMIN_HTTPS: "true"
      restart_policy: always

- hosts: jupyters
  become: yes
  tasks:
  - name: Create directory
    file:
      path: /root/work
      state: directory
      mode: '0777'
  - name: Set Jupyter
    community.docker.docker_container:
      name: jupyter
      image: jupyter/scipy-notebook:latest
      ports:
        - 8888:8888
      volumes:
        - /root/work:/home/jovyan/work
      restart_policy: always
      command: start-notebook.sh --NotebookApp.token='uCm10fNvi'

